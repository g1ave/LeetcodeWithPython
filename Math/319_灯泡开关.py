import math
from math import floor


# 初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。
#
# 第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。
#
# 找出并返回 n 轮后有多少个亮着的灯泡。
#
# 来源：力扣（LeetCode）
# 链接：https://leetcode-cn.com/problems/bulb-switcher
# 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution:
    def bulbSwitch(self, n: int) -> int:
        return floor(math.sqrt(n))


# 题解： （无论怎么模拟 都会超时 必须通过数学方法解决）
# 对于位于第 i 个位置上的灯泡， i 有多少个因数 就会被反转多少次开关，当翻转的次数为奇数时，灯泡最后才会是亮着的
# 所以演变为判断 1 到 n 中因数为奇数个的数有多少个
# 再进一步分析（难点） 只有平方数会出现 奇数个因数的情况 因为非平方数的因数都是两个不同的因数 必定是偶数个 如 6 = 1 x 6 = 2 x 3





